"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  deploy: true,
  deployAndWait: true,
  connect: true
};
exports.connect = exports.deployAndWait = exports.deploy = void 0;

var _contracts = require("./contracts");

var _config = require("./config");

var _index = require("./contracts/index.dist");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _index[key];
    }
  });
});

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const deploy = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (name, signer, options) {
    let documentStoreCreatorFactoryAddress = options === null || options === void 0 ? void 0 : options.documentStoreCreatorAddressOverride;

    if (!documentStoreCreatorFactoryAddress) {
      var _yield$signer$provide, _signer$provider;

      const chainId = (_yield$signer$provide = yield (_signer$provider = signer.provider) === null || _signer$provider === void 0 ? void 0 : _signer$provider.getNetwork()) === null || _yield$signer$provide === void 0 ? void 0 : _yield$signer$provide.chainId;
      documentStoreCreatorFactoryAddress = (0, _config.getDocumentStoreCreatorAddress)(chainId);
    }

    const factory = _contracts.DocumentStoreCreator__factory.connect(documentStoreCreatorFactoryAddress, signer);

    return factory.deploy(name);
  });

  return function deploy(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

exports.deploy = deploy;

const deployAndWait = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator(function* (name, signer, options) {
    const receipt = yield (yield deploy(name, signer, options)).wait();
    if (!receipt.logs || !receipt.logs[0].address) throw new Error("Fail to detect deployed contract address");
    return _contracts.UpgradableDocumentStore__factory.connect(receipt.logs[0].address, signer);
  });

  return function deployAndWait(_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();

exports.deployAndWait = deployAndWait;

const connect = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator(function* (address, signerOrProvider) {
    return _contracts.UpgradableDocumentStore__factory.connect(address, signerOrProvider);
  });

  return function connect(_x7, _x8) {
    return _ref3.apply(this, arguments);
  };
}(); // Export typechain classes for distribution purposes


exports.connect = connect;