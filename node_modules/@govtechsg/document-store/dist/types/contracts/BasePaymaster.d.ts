/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BasePaymasterInterface extends ethers.utils.Interface {
  functions: {
    "FORWARDER_HUB_OVERHEAD()": FunctionFragment;
    "PAYMASTER_ACCEPTANCE_BUDGET()": FunctionFragment;
    "POST_RELAYED_CALL_GAS_LIMIT()": FunctionFragment;
    "PRE_RELAYED_CALL_GAS_LIMIT()": FunctionFragment;
    "owner()": FunctionFragment;
    "postRelayedCall(bytes,bool,uint256,tuple)": FunctionFragment;
    "preRelayedCall(tuple,bytes,bytes,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "trustedForwarder()": FunctionFragment;
    "versionPaymaster()": FunctionFragment;
    "getHubAddr()": FunctionFragment;
    "getGasLimits()": FunctionFragment;
    "_verifyForwarder(tuple)": FunctionFragment;
    "setRelayHub(address)": FunctionFragment;
    "setTrustedForwarder(address)": FunctionFragment;
    "getRelayHubDeposit()": FunctionFragment;
    "withdrawRelayHubDepositTo(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FORWARDER_HUB_OVERHEAD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMASTER_ACCEPTANCE_BUDGET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POST_RELAYED_CALL_GAS_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRE_RELAYED_CALL_GAS_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "postRelayedCall",
    values: [
      BytesLike,
      boolean,
      BigNumberish,
      {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "preRelayedCall",
    values: [
      {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "versionPaymaster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHubAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGasLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_verifyForwarder",
    values: [
      {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "setRelayHub", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelayHubDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRelayHubDepositTo",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "FORWARDER_HUB_OVERHEAD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMASTER_ACCEPTANCE_BUDGET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POST_RELAYED_CALL_GAS_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRE_RELAYED_CALL_GAS_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionPaymaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHubAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGasLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_verifyForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelayHub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelayHubDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRelayHubDepositTo",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class BasePaymaster extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BasePaymasterInterface;

  functions: {
    FORWARDER_HUB_OVERHEAD(overrides?: CallOverrides): Promise<[BigNumber]>;

    "FORWARDER_HUB_OVERHEAD()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    PAYMASTER_ACCEPTANCE_BUDGET(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "PAYMASTER_ACCEPTANCE_BUDGET()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    POST_RELAYED_CALL_GAS_LIMIT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "POST_RELAYED_CALL_GAS_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PRE_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PRE_RELAYED_CALL_GAS_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,bytes,uint256,address))"(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    preRelayedCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "preRelayedCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,bytes,uint256)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<[string]>;

    versionPaymaster(overrides?: CallOverrides): Promise<[string]>;

    "versionPaymaster()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * return the relayHub of this contract.
     */
    getHubAddr(overrides?: CallOverrides): Promise<[string]>;

    /**
     * return the relayHub of this contract.
     */
    "getHubAddr()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Return the GasLimits constants used by the Paymaster.
     */
    getGasLimits(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          acceptanceBudget: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        }
      ] & {
        limits: [BigNumber, BigNumber, BigNumber] & {
          acceptanceBudget: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        };
      }
    >;

    /**
     * Return the GasLimits constants used by the Paymaster.
     */
    "getGasLimits()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          acceptanceBudget: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        }
      ] & {
        limits: [BigNumber, BigNumber, BigNumber] & {
          acceptanceBudget: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        };
      }
    >;

    _verifyForwarder(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      overrides?: CallOverrides
    ): Promise<[void]>;

    "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)))"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      overrides?: CallOverrides
    ): Promise<[void]>;

    setRelayHub(
      hub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRelayHub(address)"(
      hub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTrustedForwarder(
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTrustedForwarder(address)"(
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * check current deposit on relay hub.
     */
    getRelayHubDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * check current deposit on relay hub.
     */
    "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * withdraw deposit from relayHub
     */
    withdrawRelayHubDepositTo(
      amount: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * withdraw deposit from relayHub
     */
    "withdrawRelayHubDepositTo(uint256,address)"(
      amount: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FORWARDER_HUB_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;

  "FORWARDER_HUB_OVERHEAD()"(overrides?: CallOverrides): Promise<BigNumber>;

  PAYMASTER_ACCEPTANCE_BUDGET(overrides?: CallOverrides): Promise<BigNumber>;

  "PAYMASTER_ACCEPTANCE_BUDGET()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  POST_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  "POST_RELAYED_CALL_GAS_LIMIT()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  PRE_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  "PRE_RELAYED_CALL_GAS_LIMIT()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  postRelayedCall(
    context: BytesLike,
    success: boolean,
    gasUseWithoutPost: BigNumberish,
    relayData: {
      gasPrice: BigNumberish;
      pctRelayFee: BigNumberish;
      baseRelayFee: BigNumberish;
      relayWorker: string;
      paymaster: string;
      paymasterData: BytesLike;
      clientId: BigNumberish;
      forwarder: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,bytes,uint256,address))"(
    context: BytesLike,
    success: boolean,
    gasUseWithoutPost: BigNumberish,
    relayData: {
      gasPrice: BigNumberish;
      pctRelayFee: BigNumberish;
      baseRelayFee: BigNumberish;
      relayWorker: string;
      paymaster: string;
      paymasterData: BytesLike;
      clientId: BigNumberish;
      forwarder: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  preRelayedCall(
    relayRequest: {
      request: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      };
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      };
    },
    signature: BytesLike,
    approvalData: BytesLike,
    maxPossibleGas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "preRelayedCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,bytes,uint256)"(
    relayRequest: {
      request: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      };
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      };
    },
    signature: BytesLike,
    approvalData: BytesLike,
    maxPossibleGas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trustedForwarder(overrides?: CallOverrides): Promise<string>;

  "trustedForwarder()"(overrides?: CallOverrides): Promise<string>;

  versionPaymaster(overrides?: CallOverrides): Promise<string>;

  "versionPaymaster()"(overrides?: CallOverrides): Promise<string>;

  /**
   * return the relayHub of this contract.
   */
  getHubAddr(overrides?: CallOverrides): Promise<string>;

  /**
   * return the relayHub of this contract.
   */
  "getHubAddr()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Return the GasLimits constants used by the Paymaster.
   */
  getGasLimits(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      acceptanceBudget: BigNumber;
      preRelayedCallGasLimit: BigNumber;
      postRelayedCallGasLimit: BigNumber;
    }
  >;

  /**
   * Return the GasLimits constants used by the Paymaster.
   */
  "getGasLimits()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      acceptanceBudget: BigNumber;
      preRelayedCallGasLimit: BigNumber;
      postRelayedCallGasLimit: BigNumber;
    }
  >;

  _verifyForwarder(
    relayRequest: {
      request: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      };
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      };
    },
    overrides?: CallOverrides
  ): Promise<void>;

  "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)))"(
    relayRequest: {
      request: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      };
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      };
    },
    overrides?: CallOverrides
  ): Promise<void>;

  setRelayHub(
    hub: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRelayHub(address)"(
    hub: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTrustedForwarder(
    forwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTrustedForwarder(address)"(
    forwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * check current deposit on relay hub.
   */
  getRelayHubDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * check current deposit on relay hub.
   */
  "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * withdraw deposit from relayHub
   */
  withdrawRelayHubDepositTo(
    amount: BigNumberish,
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * withdraw deposit from relayHub
   */
  "withdrawRelayHubDepositTo(uint256,address)"(
    amount: BigNumberish,
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FORWARDER_HUB_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;

    "FORWARDER_HUB_OVERHEAD()"(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMASTER_ACCEPTANCE_BUDGET(overrides?: CallOverrides): Promise<BigNumber>;

    "PAYMASTER_ACCEPTANCE_BUDGET()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    POST_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    "POST_RELAYED_CALL_GAS_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PRE_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    "PRE_RELAYED_CALL_GAS_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,bytes,uint256,address))"(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    preRelayedCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { context: string; rejectOnRecipientRevert: boolean }
    >;

    "preRelayedCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,bytes,uint256)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { context: string; rejectOnRecipientRevert: boolean }
    >;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedForwarder(overrides?: CallOverrides): Promise<string>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<string>;

    versionPaymaster(overrides?: CallOverrides): Promise<string>;

    "versionPaymaster()"(overrides?: CallOverrides): Promise<string>;

    /**
     * return the relayHub of this contract.
     */
    getHubAddr(overrides?: CallOverrides): Promise<string>;

    /**
     * return the relayHub of this contract.
     */
    "getHubAddr()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Return the GasLimits constants used by the Paymaster.
     */
    getGasLimits(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        acceptanceBudget: BigNumber;
        preRelayedCallGasLimit: BigNumber;
        postRelayedCallGasLimit: BigNumber;
      }
    >;

    /**
     * Return the GasLimits constants used by the Paymaster.
     */
    "getGasLimits()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        acceptanceBudget: BigNumber;
        preRelayedCallGasLimit: BigNumber;
        postRelayedCallGasLimit: BigNumber;
      }
    >;

    _verifyForwarder(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)))"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setRelayHub(hub: string, overrides?: CallOverrides): Promise<void>;

    "setRelayHub(address)"(
      hub: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * check current deposit on relay hub.
     */
    getRelayHubDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * check current deposit on relay hub.
     */
    "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * withdraw deposit from relayHub
     */
    withdrawRelayHubDepositTo(
      amount: BigNumberish,
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * withdraw deposit from relayHub
     */
    "withdrawRelayHubDepositTo(uint256,address)"(
      amount: BigNumberish,
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    FORWARDER_HUB_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;

    "FORWARDER_HUB_OVERHEAD()"(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMASTER_ACCEPTANCE_BUDGET(overrides?: CallOverrides): Promise<BigNumber>;

    "PAYMASTER_ACCEPTANCE_BUDGET()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    POST_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    "POST_RELAYED_CALL_GAS_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PRE_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    "PRE_RELAYED_CALL_GAS_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,bytes,uint256,address))"(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    preRelayedCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "preRelayedCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,bytes,uint256)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<BigNumber>;

    versionPaymaster(overrides?: CallOverrides): Promise<BigNumber>;

    "versionPaymaster()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * return the relayHub of this contract.
     */
    getHubAddr(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * return the relayHub of this contract.
     */
    "getHubAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Return the GasLimits constants used by the Paymaster.
     */
    getGasLimits(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Return the GasLimits constants used by the Paymaster.
     */
    "getGasLimits()"(overrides?: CallOverrides): Promise<BigNumber>;

    _verifyForwarder(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)))"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRelayHub(
      hub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRelayHub(address)"(
      hub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTrustedForwarder(
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTrustedForwarder(address)"(
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * check current deposit on relay hub.
     */
    getRelayHubDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * check current deposit on relay hub.
     */
    "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * withdraw deposit from relayHub
     */
    withdrawRelayHubDepositTo(
      amount: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * withdraw deposit from relayHub
     */
    "withdrawRelayHubDepositTo(uint256,address)"(
      amount: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FORWARDER_HUB_OVERHEAD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "FORWARDER_HUB_OVERHEAD()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAYMASTER_ACCEPTANCE_BUDGET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PAYMASTER_ACCEPTANCE_BUDGET()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POST_RELAYED_CALL_GAS_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "POST_RELAYED_CALL_GAS_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRE_RELAYED_CALL_GAS_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PRE_RELAYED_CALL_GAS_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,bytes,uint256,address))"(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    preRelayedCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "preRelayedCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,bytes,uint256)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "trustedForwarder()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    versionPaymaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "versionPaymaster()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * return the relayHub of this contract.
     */
    getHubAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * return the relayHub of this contract.
     */
    "getHubAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Return the GasLimits constants used by the Paymaster.
     */
    getGasLimits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Return the GasLimits constants used by the Paymaster.
     */
    "getGasLimits()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _verifyForwarder(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)))"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRelayHub(
      hub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRelayHub(address)"(
      hub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedForwarder(
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTrustedForwarder(address)"(
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * check current deposit on relay hub.
     */
    getRelayHubDeposit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * check current deposit on relay hub.
     */
    "getRelayHubDeposit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * withdraw deposit from relayHub
     */
    withdrawRelayHubDepositTo(
      amount: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * withdraw deposit from relayHub
     */
    "withdrawRelayHubDepositTo(uint256,address)"(
      amount: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
