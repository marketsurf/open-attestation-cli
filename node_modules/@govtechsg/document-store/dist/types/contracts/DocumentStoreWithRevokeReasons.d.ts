/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DocumentStoreWithRevokeReasonsInterface
  extends ethers.utils.Interface {
  functions: {
    "bulkIssue(bytes32[])": FunctionFragment;
    "documentIssued(bytes32)": FunctionFragment;
    "documentRevoked(bytes32)": FunctionFragment;
    "getIssuedBlock(bytes32)": FunctionFragment;
    "initialize(string,address)": FunctionFragment;
    "isIssued(bytes32)": FunctionFragment;
    "isIssuedBefore(bytes32,uint256)": FunctionFragment;
    "isRevoked(bytes32)": FunctionFragment;
    "isRevokedBefore(bytes32,uint256)": FunctionFragment;
    "issue(bytes32)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeReason(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "version()": FunctionFragment;
    "revoke(bytes32)": FunctionFragment;
    "bulkRevoke(bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bulkIssue",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "documentIssued",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "documentRevoked",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuedBlock",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isIssued", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isIssuedBefore",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRevoked",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRevokedBefore",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "issue", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeReason",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "revoke", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "bulkRevoke",
    values: [BytesLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "bulkIssue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "documentIssued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "documentRevoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIssuedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isIssued", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isIssuedBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isRevoked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRevokedBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bulkRevoke", data: BytesLike): Result;

  events: {
    "DocumentIssued(bytes32)": EventFragment;
    "DocumentRevoked(bytes32)": EventFragment;
    "DocumentRevokedWithReason(bytes32,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DocumentIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DocumentRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DocumentRevokedWithReason"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class DocumentStoreWithRevokeReasons extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DocumentStoreWithRevokeReasonsInterface;

  functions: {
    bulkIssue(
      documents: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "bulkIssue(bytes32[])"(
      documents: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * A mapping of the document hash to the block number that was issued
     */
    documentIssued(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * A mapping of the document hash to the block number that was issued
     */
    "documentIssued(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * A mapping of the hash of the claim being revoked to the revocation block number
     */
    documentRevoked(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * A mapping of the hash of the claim being revoked to the revocation block number
     */
    "documentRevoked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIssuedBlock(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getIssuedBlock(bytes32)"(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "initialize(string,address)"(
      _name: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(string)"(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isIssued(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isIssued(bytes32)"(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isIssuedBefore(
      document: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isIssuedBefore(bytes32,uint256)"(
      document: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRevoked(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isRevoked(bytes32)"(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRevokedBefore(
      document: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isRevokedBefore(bytes32,uint256)"(
      document: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issue(
      document: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "issue(bytes32)"(
      document: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * A mapping of the document hash to the block number that was issued
     */
    revokeReason(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * A mapping of the document hash to the block number that was issued
     */
    "revokeReason(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;

    "version()"(overrides?: CallOverrides): Promise<[string]>;

    "revoke(bytes32)"(
      document: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revoke(bytes32,uint256)"(
      document: BytesLike,
      reason: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "bulkRevoke(bytes32[])"(
      documents: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "bulkRevoke(bytes32[],uint256)"(
      documents: BytesLike[],
      reason: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bulkIssue(
    documents: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "bulkIssue(bytes32[])"(
    documents: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * A mapping of the document hash to the block number that was issued
   */
  documentIssued(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * A mapping of the document hash to the block number that was issued
   */
  "documentIssued(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * A mapping of the hash of the claim being revoked to the revocation block number
   */
  documentRevoked(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * A mapping of the hash of the claim being revoked to the revocation block number
   */
  "documentRevoked(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIssuedBlock(
    document: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getIssuedBlock(bytes32)"(
    document: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "initialize(string,address)"(
    _name: string,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(string)"(
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isIssued(document: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "isIssued(bytes32)"(
    document: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isIssuedBefore(
    document: BytesLike,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isIssuedBefore(bytes32,uint256)"(
    document: BytesLike,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRevoked(document: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "isRevoked(bytes32)"(
    document: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRevokedBefore(
    document: BytesLike,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isRevokedBefore(bytes32,uint256)"(
    document: BytesLike,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issue(
    document: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "issue(bytes32)"(
    document: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * A mapping of the document hash to the block number that was issued
   */
  revokeReason(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * A mapping of the document hash to the block number that was issued
   */
  "revokeReason(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  "version()"(overrides?: CallOverrides): Promise<string>;

  "revoke(bytes32)"(
    document: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revoke(bytes32,uint256)"(
    document: BytesLike,
    reason: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "bulkRevoke(bytes32[])"(
    documents: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "bulkRevoke(bytes32[],uint256)"(
    documents: BytesLike[],
    reason: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bulkIssue(documents: BytesLike[], overrides?: CallOverrides): Promise<void>;

    "bulkIssue(bytes32[])"(
      documents: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * A mapping of the document hash to the block number that was issued
     */
    documentIssued(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * A mapping of the document hash to the block number that was issued
     */
    "documentIssued(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * A mapping of the hash of the claim being revoked to the revocation block number
     */
    documentRevoked(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * A mapping of the hash of the claim being revoked to the revocation block number
     */
    "documentRevoked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIssuedBlock(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIssuedBlock(bytes32)"(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "initialize(string,address)"(
      _name: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isIssued(document: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "isIssued(bytes32)"(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isIssuedBefore(
      document: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isIssuedBefore(bytes32,uint256)"(
      document: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRevoked(document: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "isRevoked(bytes32)"(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRevokedBefore(
      document: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isRevokedBefore(bytes32,uint256)"(
      document: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issue(document: BytesLike, overrides?: CallOverrides): Promise<void>;

    "issue(bytes32)"(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * A mapping of the document hash to the block number that was issued
     */
    revokeReason(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * A mapping of the document hash to the block number that was issued
     */
    "revokeReason(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;

    "version()"(overrides?: CallOverrides): Promise<string>;

    "revoke(bytes32)"(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "revoke(bytes32,uint256)"(
      document: BytesLike,
      reason: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "bulkRevoke(bytes32[])"(
      documents: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "bulkRevoke(bytes32[],uint256)"(
      documents: BytesLike[],
      reason: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    DocumentIssued(
      document: BytesLike | null
    ): TypedEventFilter<[string], { document: string }>;

    DocumentRevoked(
      document: BytesLike | null
    ): TypedEventFilter<[string], { document: string }>;

    DocumentRevokedWithReason(
      document: BytesLike | null,
      reason: null
    ): TypedEventFilter<
      [string, BigNumber],
      { document: string; reason: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    bulkIssue(
      documents: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "bulkIssue(bytes32[])"(
      documents: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * A mapping of the document hash to the block number that was issued
     */
    documentIssued(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * A mapping of the document hash to the block number that was issued
     */
    "documentIssued(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * A mapping of the hash of the claim being revoked to the revocation block number
     */
    documentRevoked(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * A mapping of the hash of the claim being revoked to the revocation block number
     */
    "documentRevoked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIssuedBlock(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIssuedBlock(bytes32)"(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "initialize(string,address)"(
      _name: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(string)"(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isIssued(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isIssued(bytes32)"(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isIssuedBefore(
      document: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isIssuedBefore(bytes32,uint256)"(
      document: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRevoked(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRevoked(bytes32)"(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRevokedBefore(
      document: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRevokedBefore(bytes32,uint256)"(
      document: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      document: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "issue(bytes32)"(
      document: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * A mapping of the document hash to the block number that was issued
     */
    revokeReason(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * A mapping of the document hash to the block number that was issued
     */
    "revokeReason(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;

    "revoke(bytes32)"(
      document: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revoke(bytes32,uint256)"(
      document: BytesLike,
      reason: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "bulkRevoke(bytes32[])"(
      documents: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "bulkRevoke(bytes32[],uint256)"(
      documents: BytesLike[],
      reason: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bulkIssue(
      documents: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "bulkIssue(bytes32[])"(
      documents: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * A mapping of the document hash to the block number that was issued
     */
    documentIssued(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * A mapping of the document hash to the block number that was issued
     */
    "documentIssued(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * A mapping of the hash of the claim being revoked to the revocation block number
     */
    documentRevoked(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * A mapping of the hash of the claim being revoked to the revocation block number
     */
    "documentRevoked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIssuedBlock(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIssuedBlock(bytes32)"(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "initialize(string,address)"(
      _name: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(string)"(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isIssued(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isIssued(bytes32)"(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIssuedBefore(
      document: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isIssuedBefore(bytes32,uint256)"(
      document: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRevoked(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRevoked(bytes32)"(
      document: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRevokedBefore(
      document: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRevokedBefore(bytes32,uint256)"(
      document: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      document: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "issue(bytes32)"(
      document: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * A mapping of the document hash to the block number that was issued
     */
    revokeReason(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * A mapping of the document hash to the block number that was issued
     */
    "revokeReason(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "revoke(bytes32)"(
      document: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revoke(bytes32,uint256)"(
      document: BytesLike,
      reason: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "bulkRevoke(bytes32[])"(
      documents: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "bulkRevoke(bytes32[],uint256)"(
      documents: BytesLike[],
      reason: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
