/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ForwarderInterface extends ethers.utils.Interface {
  functions: {
    "EIP712_DOMAIN_TYPE()": FunctionFragment;
    "GENERIC_PARAMS()": FunctionFragment;
    "domains(bytes32)": FunctionFragment;
    "typeHashes(bytes32)": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "verify(tuple,bytes32,bytes32,bytes,bytes)": FunctionFragment;
    "execute(tuple,bytes32,bytes32,bytes,bytes)": FunctionFragment;
    "registerRequestType(string,string)": FunctionFragment;
    "registerDomainSeparator(string,string)": FunctionFragment;
    "_getEncoded(tuple,bytes32,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GENERIC_PARAMS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "domains", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "typeHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRequestType",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDomainSeparator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_getEncoded",
    values: [
      {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GENERIC_PARAMS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "domains", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "typeHashes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerRequestType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getEncoded",
    data: BytesLike
  ): Result;

  events: {
    "DomainRegistered(bytes32,bytes)": EventFragment;
    "RequestTypeRegistered(bytes32,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DomainRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestTypeRegistered"): EventFragment;
}

export class Forwarder extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ForwarderInterface;

  functions: {
    EIP712_DOMAIN_TYPE(overrides?: CallOverrides): Promise<[string]>;

    "EIP712_DOMAIN_TYPE()"(overrides?: CallOverrides): Promise<[string]>;

    GENERIC_PARAMS(overrides?: CallOverrides): Promise<[string]>;

    "GENERIC_PARAMS()"(overrides?: CallOverrides): Promise<[string]>;

    domains(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    "domains(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    typeHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    "typeHashes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getNonce(from: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    verify(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "verify((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    execute(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "execute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Register a new Request typehash.
     * @param typeName - the name of the request type.
     * @param typeSuffix - anything after the generic params can be empty string (if no extra fields are needed)        if it does contain a value, then a comma is added first.
     */
    registerRequestType(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Register a new Request typehash.
     * @param typeName - the name of the request type.
     * @param typeSuffix - anything after the generic params can be empty string (if no extra fields are needed)        if it does contain a value, then a comma is added first.
     */
    "registerRequestType(string,string)"(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Register a new domain separator. The domain separator must have the following fields: name,version,chainId, verifyingContract. the chainId is the current network's chainId, and the verifyingContract is this forwarder. This method is given the domain name and version to create and register the domain separator value.
     * @param name the domain's display name
     * @param version the domain/protocol version
     */
    registerDomainSeparator(
      name: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Register a new domain separator. The domain separator must have the following fields: name,version,chainId, verifyingContract. the chainId is the current network's chainId, and the verifyingContract is this forwarder. This method is given the domain name and version to create and register the domain separator value.
     * @param name the domain's display name
     * @param version the domain/protocol version
     */
    "registerDomainSeparator(string,string)"(
      name: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _getEncoded(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "_getEncoded((address,address,uint256,uint256,uint256,bytes),bytes32,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  EIP712_DOMAIN_TYPE(overrides?: CallOverrides): Promise<string>;

  "EIP712_DOMAIN_TYPE()"(overrides?: CallOverrides): Promise<string>;

  GENERIC_PARAMS(overrides?: CallOverrides): Promise<string>;

  "GENERIC_PARAMS()"(overrides?: CallOverrides): Promise<string>;

  domains(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "domains(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  typeHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "typeHashes(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getNonce(address)"(
    from: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  verify(
    req: {
      from: string;
      to: string;
      value: BigNumberish;
      gas: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    },
    domainSeparator: BytesLike,
    requestTypeHash: BytesLike,
    suffixData: BytesLike,
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "verify((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
    req: {
      from: string;
      to: string;
      value: BigNumberish;
      gas: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    },
    domainSeparator: BytesLike,
    requestTypeHash: BytesLike,
    suffixData: BytesLike,
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  execute(
    req: {
      from: string;
      to: string;
      value: BigNumberish;
      gas: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    },
    domainSeparator: BytesLike,
    requestTypeHash: BytesLike,
    suffixData: BytesLike,
    sig: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "execute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
    req: {
      from: string;
      to: string;
      value: BigNumberish;
      gas: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    },
    domainSeparator: BytesLike,
    requestTypeHash: BytesLike,
    suffixData: BytesLike,
    sig: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Register a new Request typehash.
   * @param typeName - the name of the request type.
   * @param typeSuffix - anything after the generic params can be empty string (if no extra fields are needed)        if it does contain a value, then a comma is added first.
   */
  registerRequestType(
    typeName: string,
    typeSuffix: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Register a new Request typehash.
   * @param typeName - the name of the request type.
   * @param typeSuffix - anything after the generic params can be empty string (if no extra fields are needed)        if it does contain a value, then a comma is added first.
   */
  "registerRequestType(string,string)"(
    typeName: string,
    typeSuffix: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Register a new domain separator. The domain separator must have the following fields: name,version,chainId, verifyingContract. the chainId is the current network's chainId, and the verifyingContract is this forwarder. This method is given the domain name and version to create and register the domain separator value.
   * @param name the domain's display name
   * @param version the domain/protocol version
   */
  registerDomainSeparator(
    name: string,
    version: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Register a new domain separator. The domain separator must have the following fields: name,version,chainId, verifyingContract. the chainId is the current network's chainId, and the verifyingContract is this forwarder. This method is given the domain name and version to create and register the domain separator value.
   * @param name the domain's display name
   * @param version the domain/protocol version
   */
  "registerDomainSeparator(string,string)"(
    name: string,
    version: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _getEncoded(
    req: {
      from: string;
      to: string;
      value: BigNumberish;
      gas: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    },
    requestTypeHash: BytesLike,
    suffixData: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "_getEncoded((address,address,uint256,uint256,uint256,bytes),bytes32,bytes)"(
    req: {
      from: string;
      to: string;
      value: BigNumberish;
      gas: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    },
    requestTypeHash: BytesLike,
    suffixData: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    EIP712_DOMAIN_TYPE(overrides?: CallOverrides): Promise<string>;

    "EIP712_DOMAIN_TYPE()"(overrides?: CallOverrides): Promise<string>;

    GENERIC_PARAMS(overrides?: CallOverrides): Promise<string>;

    "GENERIC_PARAMS()"(overrides?: CallOverrides): Promise<string>;

    domains(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "domains(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    typeHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "typeHashes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "verify((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; ret: string }>;

    "execute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; ret: string }>;

    /**
     * Register a new Request typehash.
     * @param typeName - the name of the request type.
     * @param typeSuffix - anything after the generic params can be empty string (if no extra fields are needed)        if it does contain a value, then a comma is added first.
     */
    registerRequestType(
      typeName: string,
      typeSuffix: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Register a new Request typehash.
     * @param typeName - the name of the request type.
     * @param typeSuffix - anything after the generic params can be empty string (if no extra fields are needed)        if it does contain a value, then a comma is added first.
     */
    "registerRequestType(string,string)"(
      typeName: string,
      typeSuffix: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Register a new domain separator. The domain separator must have the following fields: name,version,chainId, verifyingContract. the chainId is the current network's chainId, and the verifyingContract is this forwarder. This method is given the domain name and version to create and register the domain separator value.
     * @param name the domain's display name
     * @param version the domain/protocol version
     */
    registerDomainSeparator(
      name: string,
      version: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Register a new domain separator. The domain separator must have the following fields: name,version,chainId, verifyingContract. the chainId is the current network's chainId, and the verifyingContract is this forwarder. This method is given the domain name and version to create and register the domain separator value.
     * @param name the domain's display name
     * @param version the domain/protocol version
     */
    "registerDomainSeparator(string,string)"(
      name: string,
      version: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _getEncoded(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "_getEncoded((address,address,uint256,uint256,uint256,bytes),bytes32,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    DomainRegistered(
      domainSeparator: BytesLike | null,
      domainValue: null
    ): TypedEventFilter<
      [string, string],
      { domainSeparator: string; domainValue: string }
    >;

    RequestTypeRegistered(
      typeHash: BytesLike | null,
      typeStr: null
    ): TypedEventFilter<
      [string, string],
      { typeHash: string; typeStr: string }
    >;
  };

  estimateGas: {
    EIP712_DOMAIN_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    "EIP712_DOMAIN_TYPE()"(overrides?: CallOverrides): Promise<BigNumber>;

    GENERIC_PARAMS(overrides?: CallOverrides): Promise<BigNumber>;

    "GENERIC_PARAMS()"(overrides?: CallOverrides): Promise<BigNumber>;

    domains(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "domains(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    typeHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "typeHashes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verify((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execute(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "execute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Register a new Request typehash.
     * @param typeName - the name of the request type.
     * @param typeSuffix - anything after the generic params can be empty string (if no extra fields are needed)        if it does contain a value, then a comma is added first.
     */
    registerRequestType(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Register a new Request typehash.
     * @param typeName - the name of the request type.
     * @param typeSuffix - anything after the generic params can be empty string (if no extra fields are needed)        if it does contain a value, then a comma is added first.
     */
    "registerRequestType(string,string)"(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Register a new domain separator. The domain separator must have the following fields: name,version,chainId, verifyingContract. the chainId is the current network's chainId, and the verifyingContract is this forwarder. This method is given the domain name and version to create and register the domain separator value.
     * @param name the domain's display name
     * @param version the domain/protocol version
     */
    registerDomainSeparator(
      name: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Register a new domain separator. The domain separator must have the following fields: name,version,chainId, verifyingContract. the chainId is the current network's chainId, and the verifyingContract is this forwarder. This method is given the domain name and version to create and register the domain separator value.
     * @param name the domain's display name
     * @param version the domain/protocol version
     */
    "registerDomainSeparator(string,string)"(
      name: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _getEncoded(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_getEncoded((address,address,uint256,uint256,uint256,bytes),bytes32,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EIP712_DOMAIN_TYPE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "EIP712_DOMAIN_TYPE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GENERIC_PARAMS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GENERIC_PARAMS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domains(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "domains(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    typeHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "typeHashes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verify((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "execute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Register a new Request typehash.
     * @param typeName - the name of the request type.
     * @param typeSuffix - anything after the generic params can be empty string (if no extra fields are needed)        if it does contain a value, then a comma is added first.
     */
    registerRequestType(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Register a new Request typehash.
     * @param typeName - the name of the request type.
     * @param typeSuffix - anything after the generic params can be empty string (if no extra fields are needed)        if it does contain a value, then a comma is added first.
     */
    "registerRequestType(string,string)"(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Register a new domain separator. The domain separator must have the following fields: name,version,chainId, verifyingContract. the chainId is the current network's chainId, and the verifyingContract is this forwarder. This method is given the domain name and version to create and register the domain separator value.
     * @param name the domain's display name
     * @param version the domain/protocol version
     */
    registerDomainSeparator(
      name: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Register a new domain separator. The domain separator must have the following fields: name,version,chainId, verifyingContract. the chainId is the current network's chainId, and the verifyingContract is this forwarder. This method is given the domain name and version to create and register the domain separator value.
     * @param name the domain's display name
     * @param version the domain/protocol version
     */
    "registerDomainSeparator(string,string)"(
      name: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _getEncoded(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_getEncoded((address,address,uint256,uint256,uint256,bytes),bytes32,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
