/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { ConfigurableTrustForwarder } from "../ConfigurableTrustForwarder";

export class ConfigurableTrustForwarder__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConfigurableTrustForwarder> {
    return super.deploy(overrides || {}) as Promise<ConfigurableTrustForwarder>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ConfigurableTrustForwarder {
    return super.attach(address) as ConfigurableTrustForwarder;
  }
  connect(signer: Signer): ConfigurableTrustForwarder__factory {
    return super.connect(signer) as ConfigurableTrustForwarder__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConfigurableTrustForwarder {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ConfigurableTrustForwarder;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "ret",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102bc806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806398c0fc3414610030575b600080fd5b6100e76004803603606081101561004657600080fd5b810190808035906020019064010000000081111561006357600080fd5b82018360208201111561007557600080fd5b8035906020019184600183028401116401000000008311171561009757600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061016b565b60405180831515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561012f578082015181840152602081019050610114565b50505050905090810190601f16801561015c5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b600060608273ffffffffffffffffffffffffffffffffffffffff1686868660405160200180848480828437808301925050508273ffffffffffffffffffffffffffffffffffffffff1660601b815260140193505050506040516020818303038152906040526040518082805190602001908083835b6020831061020357805182526020820191506020810190506020830392506101e0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610265576040519150601f19603f3d011682016040523d82523d6000602084013e61026a565b606091505b5080925081935050508161027d57600080fd5b9450949250505056fea2646970667358221220a86246c796d10cb40416094fb6768ca2a58fe706f3326e79023531dd6c31b99664736f6c634300060c0033";
