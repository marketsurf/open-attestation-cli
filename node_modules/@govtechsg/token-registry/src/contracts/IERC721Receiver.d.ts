/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IERC721ReceiverInterface extends ethers.utils.Interface {
  functions: {
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;

  events: {};
}

export class IERC721Receiver extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IERC721ReceiverInterface;

  functions: {
    /**
     * The ERC721 smart contract calls this function on the recipient after a {IERC721-safeTransferFrom}. This function MUST return the function selector, otherwise the caller will revert the transaction. The selector to be returned can be obtained as `this.onERC721Received.selector`. This function MAY throw to revert and reject the transfer. Note: the ERC721 contract address is always the message sender.
     * Handle the receipt of an NFT
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param operator The address which called `safeTransferFrom` function
     * @param tokenId The NFT identifier which is being transferred
     * @returns bytes4 `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`
     */
    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * The ERC721 smart contract calls this function on the recipient after a {IERC721-safeTransferFrom}. This function MUST return the function selector, otherwise the caller will revert the transaction. The selector to be returned can be obtained as `this.onERC721Received.selector`. This function MAY throw to revert and reject the transfer. Note: the ERC721 contract address is always the message sender.
     * Handle the receipt of an NFT
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param operator The address which called `safeTransferFrom` function
     * @param tokenId The NFT identifier which is being transferred
     * @returns bytes4 `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`
     */
    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * The ERC721 smart contract calls this function on the recipient after a {IERC721-safeTransferFrom}. This function MUST return the function selector, otherwise the caller will revert the transaction. The selector to be returned can be obtained as `this.onERC721Received.selector`. This function MAY throw to revert and reject the transfer. Note: the ERC721 contract address is always the message sender.
   * Handle the receipt of an NFT
   * @param data Additional data with no specified format
   * @param from The address which previously owned the token
   * @param operator The address which called `safeTransferFrom` function
   * @param tokenId The NFT identifier which is being transferred
   * @returns bytes4 `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`
   */
  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * The ERC721 smart contract calls this function on the recipient after a {IERC721-safeTransferFrom}. This function MUST return the function selector, otherwise the caller will revert the transaction. The selector to be returned can be obtained as `this.onERC721Received.selector`. This function MAY throw to revert and reject the transfer. Note: the ERC721 contract address is always the message sender.
   * Handle the receipt of an NFT
   * @param data Additional data with no specified format
   * @param from The address which previously owned the token
   * @param operator The address which called `safeTransferFrom` function
   * @param tokenId The NFT identifier which is being transferred
   * @returns bytes4 `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`
   */
  "onERC721Received(address,address,uint256,bytes)"(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * The ERC721 smart contract calls this function on the recipient after a {IERC721-safeTransferFrom}. This function MUST return the function selector, otherwise the caller will revert the transaction. The selector to be returned can be obtained as `this.onERC721Received.selector`. This function MAY throw to revert and reject the transfer. Note: the ERC721 contract address is always the message sender.
     * Handle the receipt of an NFT
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param operator The address which called `safeTransferFrom` function
     * @param tokenId The NFT identifier which is being transferred
     * @returns bytes4 `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`
     */
    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * The ERC721 smart contract calls this function on the recipient after a {IERC721-safeTransferFrom}. This function MUST return the function selector, otherwise the caller will revert the transaction. The selector to be returned can be obtained as `this.onERC721Received.selector`. This function MAY throw to revert and reject the transfer. Note: the ERC721 contract address is always the message sender.
     * Handle the receipt of an NFT
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param operator The address which called `safeTransferFrom` function
     * @param tokenId The NFT identifier which is being transferred
     * @returns bytes4 `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`
     */
    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    /**
     * The ERC721 smart contract calls this function on the recipient after a {IERC721-safeTransferFrom}. This function MUST return the function selector, otherwise the caller will revert the transaction. The selector to be returned can be obtained as `this.onERC721Received.selector`. This function MAY throw to revert and reject the transfer. Note: the ERC721 contract address is always the message sender.
     * Handle the receipt of an NFT
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param operator The address which called `safeTransferFrom` function
     * @param tokenId The NFT identifier which is being transferred
     * @returns bytes4 `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`
     */
    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * The ERC721 smart contract calls this function on the recipient after a {IERC721-safeTransferFrom}. This function MUST return the function selector, otherwise the caller will revert the transaction. The selector to be returned can be obtained as `this.onERC721Received.selector`. This function MAY throw to revert and reject the transfer. Note: the ERC721 contract address is always the message sender.
     * Handle the receipt of an NFT
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param operator The address which called `safeTransferFrom` function
     * @param tokenId The NFT identifier which is being transferred
     * @returns bytes4 `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`
     */
    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * The ERC721 smart contract calls this function on the recipient after a {IERC721-safeTransferFrom}. This function MUST return the function selector, otherwise the caller will revert the transaction. The selector to be returned can be obtained as `this.onERC721Received.selector`. This function MAY throw to revert and reject the transfer. Note: the ERC721 contract address is always the message sender.
     * Handle the receipt of an NFT
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param operator The address which called `safeTransferFrom` function
     * @param tokenId The NFT identifier which is being transferred
     * @returns bytes4 `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`
     */
    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * The ERC721 smart contract calls this function on the recipient after a {IERC721-safeTransferFrom}. This function MUST return the function selector, otherwise the caller will revert the transaction. The selector to be returned can be obtained as `this.onERC721Received.selector`. This function MAY throw to revert and reject the transfer. Note: the ERC721 contract address is always the message sender.
     * Handle the receipt of an NFT
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param operator The address which called `safeTransferFrom` function
     * @param tokenId The NFT identifier which is being transferred
     * @returns bytes4 `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`
     */
    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
