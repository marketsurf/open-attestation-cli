/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ITitleEscrowInterface extends ethers.utils.Interface {
  functions: {
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "changeHolder(address)": FunctionFragment;
    "approveNewOwner(address)": FunctionFragment;
    "transferTo(address)": FunctionFragment;
    "approvedOwner()": FunctionFragment;
    "approvedBeneficiary()": FunctionFragment;
    "approvedHolder()": FunctionFragment;
    "beneficiary()": FunctionFragment;
    "holder()": FunctionFragment;
    "status()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenRegistry()": FunctionFragment;
    "transferToNewEscrow(address,address)": FunctionFragment;
    "approveNewTransferTargets(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeHolder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "transferTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approvedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approvedBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approvedHolder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "holder", values?: undefined): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferToNewEscrow",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveNewTransferTargets",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transferTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approvedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "holder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToNewEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveNewTransferTargets",
    data: BytesLike
  ): Result;

  events: {
    "TitleCeded(address,address,uint256)": EventFragment;
    "TitleReceived(address,address,uint256)": EventFragment;
    "TransferOwnerApproval(uint256,address,address)": EventFragment;
    "TransferTitleEscrowApproval(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TitleCeded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TitleReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOwnerApproval"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferTitleEscrowApproval"
  ): EventFragment;
}

export class ITitleEscrow extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ITitleEscrowInterface;

  functions: {
    /**
     * Handle the receipt of an NFT
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param operator The address which called `safeTransferFrom` function
     * @param tokenId The NFT identifier which is being transferred
     * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))` unless throwing
     */
    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Handle the receipt of an NFT
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param operator The address which called `safeTransferFrom` function
     * @param tokenId The NFT identifier which is being transferred
     * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))` unless throwing
     */
    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Handle the change of holdership by current holder
     * @param newHolder The address of the new holder
     */
    changeHolder(
      newHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Handle the change of holdership by current holder
     * @param newHolder The address of the new holder
     */
    "changeHolder(address)"(
      newHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Used by beneficiary to approve an EOA or smart contract to be the next owner for the token
     * @param newOwner The address of the new holder
     */
    approveNewOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Used by beneficiary to approve an EOA or smart contract to be the next owner for the token
     * @param newOwner The address of the new holder
     */
    "approveNewOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Handle the token transfer by the holder after beneficiary's endorsement
     * @param newBeneficiary The address of the new holder
     */
    transferTo(
      newBeneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Handle the token transfer by the holder after beneficiary's endorsement
     * @param newBeneficiary The address of the new holder
     */
    "transferTo(address)"(
      newBeneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Public getter to access the approved owner if any
     */
    approvedOwner(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Public getter to access the approved owner if any
     */
    "approvedOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Public getter to access the approved beneficiary if any
     */
    approvedBeneficiary(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Public getter to access the approved beneficiary if any
     */
    "approvedBeneficiary()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Public getter to access the approved holder if any
     */
    approvedHolder(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Public getter to access the approved holder if any
     */
    "approvedHolder()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Public getter to access the beneficiary of the Title. The beneficiary is the legal owner of the Title.
     */
    beneficiary(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Public getter to access the beneficiary of the Title. The beneficiary is the legal owner of the Title.
     */
    "beneficiary()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Public getter to access the holder of the Title, who is equivalent to holdership of a physical Title
     */
    holder(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Public getter to access the holder of the Title, who is equivalent to holdership of a physical Title
     */
    "holder()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Status of the TitleEscrow contract, which can be {Uninitialised, InUse, Exited}
     */
    status(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Status of the TitleEscrow contract, which can be {Uninitialised, InUse, Exited}
     */
    "status()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * ERC165 supportsInterface
     */
    supportsInterface(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * ERC165 supportsInterface
     */
    "supportsInterface(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * TokenRegistry which this TitleEscrow is registered to accept tokens from
     */
    tokenRegistry(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * TokenRegistry which this TitleEscrow is registered to accept tokens from
     */
    "tokenRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Used by holder to transfer token to a newly created title escrow contract
     * @param newBeneficiary The address of the new beneficiary
     * @param newHolder The address of the new holder
     */
    transferToNewEscrow(
      newBeneficiary: string,
      newHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Used by holder to transfer token to a newly created title escrow contract
     * @param newBeneficiary The address of the new beneficiary
     * @param newHolder The address of the new holder
     */
    "transferToNewEscrow(address,address)"(
      newBeneficiary: string,
      newHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Used by beneficiary to approve new beneficiary and holder to be next owners for the token
     * @param newBeneficiary The address of the new beneficiary
     * @param newHolder The address of the new holder
     */
    approveNewTransferTargets(
      newBeneficiary: string,
      newHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Used by beneficiary to approve new beneficiary and holder to be next owners for the token
     * @param newBeneficiary The address of the new beneficiary
     * @param newHolder The address of the new holder
     */
    "approveNewTransferTargets(address,address)"(
      newBeneficiary: string,
      newHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * Handle the receipt of an NFT
   * @param data Additional data with no specified format
   * @param from The address which previously owned the token
   * @param operator The address which called `safeTransferFrom` function
   * @param tokenId The NFT identifier which is being transferred
   * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))` unless throwing
   */
  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Handle the receipt of an NFT
   * @param data Additional data with no specified format
   * @param from The address which previously owned the token
   * @param operator The address which called `safeTransferFrom` function
   * @param tokenId The NFT identifier which is being transferred
   * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))` unless throwing
   */
  "onERC721Received(address,address,uint256,bytes)"(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Handle the change of holdership by current holder
   * @param newHolder The address of the new holder
   */
  changeHolder(
    newHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Handle the change of holdership by current holder
   * @param newHolder The address of the new holder
   */
  "changeHolder(address)"(
    newHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Used by beneficiary to approve an EOA or smart contract to be the next owner for the token
   * @param newOwner The address of the new holder
   */
  approveNewOwner(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Used by beneficiary to approve an EOA or smart contract to be the next owner for the token
   * @param newOwner The address of the new holder
   */
  "approveNewOwner(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Handle the token transfer by the holder after beneficiary's endorsement
   * @param newBeneficiary The address of the new holder
   */
  transferTo(
    newBeneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Handle the token transfer by the holder after beneficiary's endorsement
   * @param newBeneficiary The address of the new holder
   */
  "transferTo(address)"(
    newBeneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Public getter to access the approved owner if any
   */
  approvedOwner(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Public getter to access the approved owner if any
   */
  "approvedOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Public getter to access the approved beneficiary if any
   */
  approvedBeneficiary(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Public getter to access the approved beneficiary if any
   */
  "approvedBeneficiary()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Public getter to access the approved holder if any
   */
  approvedHolder(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Public getter to access the approved holder if any
   */
  "approvedHolder()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Public getter to access the beneficiary of the Title. The beneficiary is the legal owner of the Title.
   */
  beneficiary(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Public getter to access the beneficiary of the Title. The beneficiary is the legal owner of the Title.
   */
  "beneficiary()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Public getter to access the holder of the Title, who is equivalent to holdership of a physical Title
   */
  holder(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Public getter to access the holder of the Title, who is equivalent to holdership of a physical Title
   */
  "holder()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Status of the TitleEscrow contract, which can be {Uninitialised, InUse, Exited}
   */
  status(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Status of the TitleEscrow contract, which can be {Uninitialised, InUse, Exited}
   */
  "status()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * ERC165 supportsInterface
   */
  supportsInterface(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * ERC165 supportsInterface
   */
  "supportsInterface(bytes4)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * TokenRegistry which this TitleEscrow is registered to accept tokens from
   */
  tokenRegistry(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * TokenRegistry which this TitleEscrow is registered to accept tokens from
   */
  "tokenRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Used by holder to transfer token to a newly created title escrow contract
   * @param newBeneficiary The address of the new beneficiary
   * @param newHolder The address of the new holder
   */
  transferToNewEscrow(
    newBeneficiary: string,
    newHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Used by holder to transfer token to a newly created title escrow contract
   * @param newBeneficiary The address of the new beneficiary
   * @param newHolder The address of the new holder
   */
  "transferToNewEscrow(address,address)"(
    newBeneficiary: string,
    newHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Used by beneficiary to approve new beneficiary and holder to be next owners for the token
   * @param newBeneficiary The address of the new beneficiary
   * @param newHolder The address of the new holder
   */
  approveNewTransferTargets(
    newBeneficiary: string,
    newHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Used by beneficiary to approve new beneficiary and holder to be next owners for the token
   * @param newBeneficiary The address of the new beneficiary
   * @param newHolder The address of the new holder
   */
  "approveNewTransferTargets(address,address)"(
    newBeneficiary: string,
    newHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Handle the receipt of an NFT
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param operator The address which called `safeTransferFrom` function
     * @param tokenId The NFT identifier which is being transferred
     * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))` unless throwing
     */
    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Handle the receipt of an NFT
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param operator The address which called `safeTransferFrom` function
     * @param tokenId The NFT identifier which is being transferred
     * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))` unless throwing
     */
    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Handle the change of holdership by current holder
     * @param newHolder The address of the new holder
     */
    changeHolder(newHolder: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Handle the change of holdership by current holder
     * @param newHolder The address of the new holder
     */
    "changeHolder(address)"(
      newHolder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Used by beneficiary to approve an EOA or smart contract to be the next owner for the token
     * @param newOwner The address of the new holder
     */
    approveNewOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Used by beneficiary to approve an EOA or smart contract to be the next owner for the token
     * @param newOwner The address of the new holder
     */
    "approveNewOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Handle the token transfer by the holder after beneficiary's endorsement
     * @param newBeneficiary The address of the new holder
     */
    transferTo(
      newBeneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Handle the token transfer by the holder after beneficiary's endorsement
     * @param newBeneficiary The address of the new holder
     */
    "transferTo(address)"(
      newBeneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Public getter to access the approved owner if any
     */
    approvedOwner(overrides?: CallOverrides): Promise<void>;

    /**
     * Public getter to access the approved owner if any
     */
    "approvedOwner()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Public getter to access the approved beneficiary if any
     */
    approvedBeneficiary(overrides?: CallOverrides): Promise<void>;

    /**
     * Public getter to access the approved beneficiary if any
     */
    "approvedBeneficiary()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Public getter to access the approved holder if any
     */
    approvedHolder(overrides?: CallOverrides): Promise<void>;

    /**
     * Public getter to access the approved holder if any
     */
    "approvedHolder()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Public getter to access the beneficiary of the Title. The beneficiary is the legal owner of the Title.
     */
    beneficiary(overrides?: CallOverrides): Promise<string>;

    /**
     * Public getter to access the beneficiary of the Title. The beneficiary is the legal owner of the Title.
     */
    "beneficiary()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Public getter to access the holder of the Title, who is equivalent to holdership of a physical Title
     */
    holder(overrides?: CallOverrides): Promise<string>;

    /**
     * Public getter to access the holder of the Title, who is equivalent to holdership of a physical Title
     */
    "holder()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Status of the TitleEscrow contract, which can be {Uninitialised, InUse, Exited}
     */
    status(overrides?: CallOverrides): Promise<void>;

    /**
     * Status of the TitleEscrow contract, which can be {Uninitialised, InUse, Exited}
     */
    "status()"(overrides?: CallOverrides): Promise<void>;

    /**
     * ERC165 supportsInterface
     */
    supportsInterface(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * ERC165 supportsInterface
     */
    "supportsInterface(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * TokenRegistry which this TitleEscrow is registered to accept tokens from
     */
    tokenRegistry(overrides?: CallOverrides): Promise<string>;

    /**
     * TokenRegistry which this TitleEscrow is registered to accept tokens from
     */
    "tokenRegistry()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Used by holder to transfer token to a newly created title escrow contract
     * @param newBeneficiary The address of the new beneficiary
     * @param newHolder The address of the new holder
     */
    transferToNewEscrow(
      newBeneficiary: string,
      newHolder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Used by holder to transfer token to a newly created title escrow contract
     * @param newBeneficiary The address of the new beneficiary
     * @param newHolder The address of the new holder
     */
    "transferToNewEscrow(address,address)"(
      newBeneficiary: string,
      newHolder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Used by beneficiary to approve new beneficiary and holder to be next owners for the token
     * @param newBeneficiary The address of the new beneficiary
     * @param newHolder The address of the new holder
     */
    approveNewTransferTargets(
      newBeneficiary: string,
      newHolder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Used by beneficiary to approve new beneficiary and holder to be next owners for the token
     * @param newBeneficiary The address of the new beneficiary
     * @param newHolder The address of the new holder
     */
    "approveNewTransferTargets(address,address)"(
      newBeneficiary: string,
      newHolder: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    TitleCeded(
      _tokenRegistry: string | null,
      _to: string | null,
      _id: BigNumberish | null
    ): EventFilter;

    TitleReceived(
      _tokenRegistry: string | null,
      _from: string | null,
      _id: BigNumberish | null
    ): EventFilter;

    TransferOwnerApproval(
      _tokenid: BigNumberish | null,
      _from: string | null,
      _to: string | null
    ): EventFilter;

    TransferTitleEscrowApproval(
      newBeneficiary: string | null,
      newHolder: string | null
    ): EventFilter;
  };

  estimateGas: {
    /**
     * Handle the receipt of an NFT
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param operator The address which called `safeTransferFrom` function
     * @param tokenId The NFT identifier which is being transferred
     * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))` unless throwing
     */
    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Handle the receipt of an NFT
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param operator The address which called `safeTransferFrom` function
     * @param tokenId The NFT identifier which is being transferred
     * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))` unless throwing
     */
    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Handle the change of holdership by current holder
     * @param newHolder The address of the new holder
     */
    changeHolder(newHolder: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Handle the change of holdership by current holder
     * @param newHolder The address of the new holder
     */
    "changeHolder(address)"(
      newHolder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Used by beneficiary to approve an EOA or smart contract to be the next owner for the token
     * @param newOwner The address of the new holder
     */
    approveNewOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Used by beneficiary to approve an EOA or smart contract to be the next owner for the token
     * @param newOwner The address of the new holder
     */
    "approveNewOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Handle the token transfer by the holder after beneficiary's endorsement
     * @param newBeneficiary The address of the new holder
     */
    transferTo(
      newBeneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Handle the token transfer by the holder after beneficiary's endorsement
     * @param newBeneficiary The address of the new holder
     */
    "transferTo(address)"(
      newBeneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Public getter to access the approved owner if any
     */
    approvedOwner(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Public getter to access the approved owner if any
     */
    "approvedOwner()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Public getter to access the approved beneficiary if any
     */
    approvedBeneficiary(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Public getter to access the approved beneficiary if any
     */
    "approvedBeneficiary()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Public getter to access the approved holder if any
     */
    approvedHolder(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Public getter to access the approved holder if any
     */
    "approvedHolder()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Public getter to access the beneficiary of the Title. The beneficiary is the legal owner of the Title.
     */
    beneficiary(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Public getter to access the beneficiary of the Title. The beneficiary is the legal owner of the Title.
     */
    "beneficiary()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Public getter to access the holder of the Title, who is equivalent to holdership of a physical Title
     */
    holder(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Public getter to access the holder of the Title, who is equivalent to holdership of a physical Title
     */
    "holder()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Status of the TitleEscrow contract, which can be {Uninitialised, InUse, Exited}
     */
    status(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Status of the TitleEscrow contract, which can be {Uninitialised, InUse, Exited}
     */
    "status()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * ERC165 supportsInterface
     */
    supportsInterface(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * ERC165 supportsInterface
     */
    "supportsInterface(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * TokenRegistry which this TitleEscrow is registered to accept tokens from
     */
    tokenRegistry(overrides?: Overrides): Promise<BigNumber>;

    /**
     * TokenRegistry which this TitleEscrow is registered to accept tokens from
     */
    "tokenRegistry()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Used by holder to transfer token to a newly created title escrow contract
     * @param newBeneficiary The address of the new beneficiary
     * @param newHolder The address of the new holder
     */
    transferToNewEscrow(
      newBeneficiary: string,
      newHolder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Used by holder to transfer token to a newly created title escrow contract
     * @param newBeneficiary The address of the new beneficiary
     * @param newHolder The address of the new holder
     */
    "transferToNewEscrow(address,address)"(
      newBeneficiary: string,
      newHolder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Used by beneficiary to approve new beneficiary and holder to be next owners for the token
     * @param newBeneficiary The address of the new beneficiary
     * @param newHolder The address of the new holder
     */
    approveNewTransferTargets(
      newBeneficiary: string,
      newHolder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Used by beneficiary to approve new beneficiary and holder to be next owners for the token
     * @param newBeneficiary The address of the new beneficiary
     * @param newHolder The address of the new holder
     */
    "approveNewTransferTargets(address,address)"(
      newBeneficiary: string,
      newHolder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Handle the receipt of an NFT
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param operator The address which called `safeTransferFrom` function
     * @param tokenId The NFT identifier which is being transferred
     * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))` unless throwing
     */
    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Handle the receipt of an NFT
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param operator The address which called `safeTransferFrom` function
     * @param tokenId The NFT identifier which is being transferred
     * @returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))` unless throwing
     */
    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Handle the change of holdership by current holder
     * @param newHolder The address of the new holder
     */
    changeHolder(
      newHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Handle the change of holdership by current holder
     * @param newHolder The address of the new holder
     */
    "changeHolder(address)"(
      newHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Used by beneficiary to approve an EOA or smart contract to be the next owner for the token
     * @param newOwner The address of the new holder
     */
    approveNewOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Used by beneficiary to approve an EOA or smart contract to be the next owner for the token
     * @param newOwner The address of the new holder
     */
    "approveNewOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Handle the token transfer by the holder after beneficiary's endorsement
     * @param newBeneficiary The address of the new holder
     */
    transferTo(
      newBeneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Handle the token transfer by the holder after beneficiary's endorsement
     * @param newBeneficiary The address of the new holder
     */
    "transferTo(address)"(
      newBeneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Public getter to access the approved owner if any
     */
    approvedOwner(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Public getter to access the approved owner if any
     */
    "approvedOwner()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Public getter to access the approved beneficiary if any
     */
    approvedBeneficiary(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Public getter to access the approved beneficiary if any
     */
    "approvedBeneficiary()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Public getter to access the approved holder if any
     */
    approvedHolder(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Public getter to access the approved holder if any
     */
    "approvedHolder()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Public getter to access the beneficiary of the Title. The beneficiary is the legal owner of the Title.
     */
    beneficiary(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Public getter to access the beneficiary of the Title. The beneficiary is the legal owner of the Title.
     */
    "beneficiary()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Public getter to access the holder of the Title, who is equivalent to holdership of a physical Title
     */
    holder(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Public getter to access the holder of the Title, who is equivalent to holdership of a physical Title
     */
    "holder()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Status of the TitleEscrow contract, which can be {Uninitialised, InUse, Exited}
     */
    status(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Status of the TitleEscrow contract, which can be {Uninitialised, InUse, Exited}
     */
    "status()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * ERC165 supportsInterface
     */
    supportsInterface(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * ERC165 supportsInterface
     */
    "supportsInterface(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * TokenRegistry which this TitleEscrow is registered to accept tokens from
     */
    tokenRegistry(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * TokenRegistry which this TitleEscrow is registered to accept tokens from
     */
    "tokenRegistry()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Used by holder to transfer token to a newly created title escrow contract
     * @param newBeneficiary The address of the new beneficiary
     * @param newHolder The address of the new holder
     */
    transferToNewEscrow(
      newBeneficiary: string,
      newHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Used by holder to transfer token to a newly created title escrow contract
     * @param newBeneficiary The address of the new beneficiary
     * @param newHolder The address of the new holder
     */
    "transferToNewEscrow(address,address)"(
      newBeneficiary: string,
      newHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Used by beneficiary to approve new beneficiary and holder to be next owners for the token
     * @param newBeneficiary The address of the new beneficiary
     * @param newHolder The address of the new holder
     */
    approveNewTransferTargets(
      newBeneficiary: string,
      newHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Used by beneficiary to approve new beneficiary and holder to be next owners for the token
     * @param newBeneficiary The address of the new beneficiary
     * @param newHolder The address of the new holder
     */
    "approveNewTransferTargets(address,address)"(
      newBeneficiary: string,
      newHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
